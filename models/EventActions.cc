/**
 *
 *  EventActions.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "EventActions.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string EventActions::Cols::_id        = "id";
const std::string EventActions::Cols::_log_id    = "log_id";
const std::string EventActions::Cols::_member_id = "member_id";
const std::string EventActions::Cols::_action    = "action";
const std::string EventActions::Cols::_timestamp = "timestamp";
const std::string EventActions::primaryKeyName   = "id";
const bool EventActions::hasPrimaryKey = true;
const std::string EventActions::tableName = "event_actions";

const std::vector<typename EventActions::MetaData> EventActions::metaData_ = {
        {"id",        "uint64_t", "integer", 8, 1, 1, 1},
        {"log_id",    "uint64_t", "integer", 8, 0, 0, 1},
        {"member_id", "uint64_t", "integer", 8, 0, 0, 1},
        {"action",    "uint64_t", "integer", 8, 0, 0, 1},
        {"timestamp", "uint64_t", "integer", 8, 0, 0, 1}
};

const std::string &EventActions::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}

EventActions::EventActions(const Row &r, const ssize_t indexOffset) noexcept
{
    if (indexOffset < 0)
    {
        if (!r["id"].isNull())
        {
            id_ = std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if (!r["log_id"].isNull())
        {
            logId_ = std::make_shared<uint64_t>(r["log_id"].as<uint64_t>());
        }
        if (!r["member_id"].isNull())
        {
            memberId_ = std::make_shared<uint64_t>(r["member_id"].as<uint64_t>());
        }
        if (!r["action"].isNull())
        {
            action_ = std::make_shared<uint64_t>(r["action"].as<uint64_t>());
        }
        if (!r["timestamp"].isNull())
        {
            timestamp_ = std::make_shared<uint64_t>(r["timestamp"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t) indexOffset;
        if (offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull())
        {
            id_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if (!r[index].isNull())
        {
            logId_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if (!r[index].isNull())
        {
            memberId_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if (!r[index].isNull())
        {
            action_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if (!r[index].isNull())
        {
            timestamp_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

EventActions::EventActions(const Json::Value &pJson,
                           const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            logId_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            memberId_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            action_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            timestamp_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
}

EventActions::EventActions(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson["id"].asUInt64());
        }
    }
    if (pJson.isMember("log_id"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["log_id"].isNull())
        {
            logId_ = std::make_shared<uint64_t>((uint64_t) pJson["log_id"].asUInt64());
        }
    }
    if (pJson.isMember("member_id"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["member_id"].isNull())
        {
            memberId_ = std::make_shared<uint64_t>((uint64_t) pJson["member_id"].asUInt64());
        }
    }
    if (pJson.isMember("action"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["action"].isNull())
        {
            action_ = std::make_shared<uint64_t>((uint64_t) pJson["action"].asUInt64());
        }
    }
    if (pJson.isMember("timestamp"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["timestamp"].isNull())
        {
            timestamp_ = std::make_shared<uint64_t>((uint64_t) pJson["timestamp"].asUInt64());
        }
    }
}

void EventActions::updateByMasqueradedJson(const Json::Value &pJson,
                                           const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            logId_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            memberId_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            action_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            timestamp_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
}

void EventActions::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("id"))
    {
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson["id"].asUInt64());
        }
    }
    if (pJson.isMember("log_id"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["log_id"].isNull())
        {
            logId_ = std::make_shared<uint64_t>((uint64_t) pJson["log_id"].asUInt64());
        }
    }
    if (pJson.isMember("member_id"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["member_id"].isNull())
        {
            memberId_ = std::make_shared<uint64_t>((uint64_t) pJson["member_id"].asUInt64());
        }
    }
    if (pJson.isMember("action"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["action"].isNull())
        {
            action_ = std::make_shared<uint64_t>((uint64_t) pJson["action"].asUInt64());
        }
    }
    if (pJson.isMember("timestamp"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["timestamp"].isNull())
        {
            timestamp_ = std::make_shared<uint64_t>((uint64_t) pJson["timestamp"].asUInt64());
        }
    }
}

const uint64_t &EventActions::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (id_)
        return *id_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventActions::getId() const noexcept
{
    return id_;
}

void EventActions::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}


const typename EventActions::PrimaryKeyType &EventActions::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &EventActions::getValueOfLogId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (logId_)
        return *logId_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventActions::getLogId() const noexcept
{
    return logId_;
}

void EventActions::setLogId(const uint64_t &pLogId) noexcept
{
    logId_ = std::make_shared<uint64_t>(pLogId);
    dirtyFlag_[1] = true;
}


const uint64_t &EventActions::getValueOfMemberId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (memberId_)
        return *memberId_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventActions::getMemberId() const noexcept
{
    return memberId_;
}

void EventActions::setMemberId(const uint64_t &pMemberId) noexcept
{
    memberId_ = std::make_shared<uint64_t>(pMemberId);
    dirtyFlag_[2] = true;
}


const uint64_t &EventActions::getValueOfAction() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (action_)
        return *action_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventActions::getAction() const noexcept
{
    return action_;
}

void EventActions::setAction(const uint64_t &pAction) noexcept
{
    action_ = std::make_shared<uint64_t>(pAction);
    dirtyFlag_[3] = true;
}


const uint64_t &EventActions::getValueOfTimestamp() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (timestamp_)
        return *timestamp_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventActions::getTimestamp() const noexcept
{
    return timestamp_;
}

void EventActions::setTimestamp(const uint64_t &pTimestamp) noexcept
{
    timestamp_ = std::make_shared<uint64_t>(pTimestamp);
    dirtyFlag_[4] = true;
}


void EventActions::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &EventActions::insertColumns() noexcept
{
    static const std::vector<std::string> inCols = {
            "log_id",
            "member_id",
            "action",
            "timestamp"
    };
    return inCols;
}

void EventActions::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getLogId())
        {
            binder << getValueOfLogId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getMemberId())
        {
            binder << getValueOfMemberId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getAction())
        {
            binder << getValueOfAction();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getTimestamp())
        {
            binder << getValueOfTimestamp();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> EventActions::updateColumns() const
{
    std::vector<std::string> ret;
    if (dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if (dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void EventActions::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getLogId())
        {
            binder << getValueOfLogId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getMemberId())
        {
            binder << getValueOfMemberId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getAction())
        {
            binder << getValueOfAction();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getTimestamp())
        {
            binder << getValueOfTimestamp();
        }
        else
        {
            binder << nullptr;
        }
    }
}

Json::Value EventActions::toJson() const
{
    Json::Value ret;
    if (getId())
    {
        ret["id"] = (Json::UInt64) getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getLogId())
    {
        ret["log_id"] = (Json::UInt64) getValueOfLogId();
    }
    else
    {
        ret["log_id"] = Json::Value();
    }
    if (getMemberId())
    {
        ret["member_id"] = (Json::UInt64) getValueOfMemberId();
    }
    else
    {
        ret["member_id"] = Json::Value();
    }
    if (getAction())
    {
        ret["action"] = (Json::UInt64) getValueOfAction();
    }
    else
    {
        ret["action"] = Json::Value();
    }
    if (getTimestamp())
    {
        ret["timestamp"] = (Json::UInt64) getValueOfTimestamp();
    }
    else
    {
        ret["timestamp"] = Json::Value();
    }
    return ret;
}

Json::Value EventActions::toMasqueradedJson(
        const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if (pMasqueradingVector.size() == 5)
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (getId())
            {
                ret[pMasqueradingVector[0]] = (Json::UInt64) getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (getLogId())
            {
                ret[pMasqueradingVector[1]] = (Json::UInt64) getValueOfLogId();
            }
            else
            {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (getMemberId())
            {
                ret[pMasqueradingVector[2]] = (Json::UInt64) getValueOfMemberId();
            }
            else
            {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty())
        {
            if (getAction())
            {
                ret[pMasqueradingVector[3]] = (Json::UInt64) getValueOfAction();
            }
            else
            {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[4].empty())
        {
            if (getTimestamp())
            {
                ret[pMasqueradingVector[4]] = (Json::UInt64) getValueOfTimestamp();
            }
            else
            {
                ret[pMasqueradingVector[4]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId())
    {
        ret["id"] = (Json::UInt64) getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getLogId())
    {
        ret["log_id"] = (Json::UInt64) getValueOfLogId();
    }
    else
    {
        ret["log_id"] = Json::Value();
    }
    if (getMemberId())
    {
        ret["member_id"] = (Json::UInt64) getValueOfMemberId();
    }
    else
    {
        ret["member_id"] = Json::Value();
    }
    if (getAction())
    {
        ret["action"] = (Json::UInt64) getValueOfAction();
    }
    else
    {
        ret["action"] = Json::Value();
    }
    if (getTimestamp())
    {
        ret["timestamp"] = (Json::UInt64) getValueOfTimestamp();
    }
    else
    {
        ret["timestamp"] = Json::Value();
    }
    return ret;
}

bool EventActions::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if (pJson.isMember("log_id"))
    {
        if (!validJsonOfField(1, "log_id", pJson["log_id"], err, true))
            return false;
    }
    else
    {
        err = "The log_id column cannot be null";
        return false;
    }
    if (pJson.isMember("member_id"))
    {
        if (!validJsonOfField(2, "member_id", pJson["member_id"], err, true))
            return false;
    }
    else
    {
        err = "The member_id column cannot be null";
        return false;
    }
    if (pJson.isMember("action"))
    {
        if (!validJsonOfField(3, "action", pJson["action"], err, true))
            return false;
    }
    else
    {
        err = "The action column cannot be null";
        return false;
    }
    if (pJson.isMember("timestamp"))
    {
        if (!validJsonOfField(4, "timestamp", pJson["timestamp"], err, true))
            return false;
    }
    else
    {
        err = "The timestamp column cannot be null";
        return false;
    }
    return true;
}

bool EventActions::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if (pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty())
    {
        if (pJson.isMember(pMasqueradingVector[0]))
        {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[1].empty())
    {
        if (pJson.isMember(pMasqueradingVector[1]))
        {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[2].empty())
    {
        if (pJson.isMember(pMasqueradingVector[2]))
        {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[3].empty())
    {
        if (pJson.isMember(pMasqueradingVector[3]))
        {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[4].empty())
    {
        if (pJson.isMember(pMasqueradingVector[4]))
        {
            if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    return true;
}

bool EventActions::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("log_id"))
    {
        if (!validJsonOfField(1, "log_id", pJson["log_id"], err, false))
            return false;
    }
    if (pJson.isMember("member_id"))
    {
        if (!validJsonOfField(2, "member_id", pJson["member_id"], err, false))
            return false;
    }
    if (pJson.isMember("action"))
    {
        if (!validJsonOfField(3, "action", pJson["action"], err, false))
            return false;
    }
    if (pJson.isMember("timestamp"))
    {
        if (!validJsonOfField(4, "timestamp", pJson["timestamp"], err, false))
            return false;
    }
    return true;
}

bool EventActions::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if (pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    return true;
}

bool EventActions::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch (index)
    {
        case 0:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (isForCreation)
            {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 2:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 3:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 4:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;

        default:
            err = "Internal error in the server";
            return false;
            break;
    }
    return true;
}
