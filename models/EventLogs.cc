/**
 *
 *  EventLogs.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "EventLogs.h"
#include "EventActions.h"
#include "EventAttendance.h"
#include "EventAwards.h"
#include "EventDiscordMap.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string EventLogs::Cols::_id                = "id";
const std::string EventLogs::Cols::_award             = "award";
const std::string EventLogs::Cols::_calendar_event_id = "calendar_event_id";
const std::string EventLogs::Cols::_platform          = "platform";
const std::string EventLogs::Cols::_status            = "status";
const std::string EventLogs::Cols::_host              = "host";
const std::string EventLogs::Cols::_hash              = "hash";
const std::string EventLogs::Cols::_rep_rate          = "rep_rate";
const std::string EventLogs::primaryKeyName           = "id";
const bool EventLogs::hasPrimaryKey = true;
const std::string EventLogs::tableName = "event_logs";

const std::vector<typename EventLogs::MetaData> EventLogs::metaData_ = {
        {"id",                "uint64_t",    "integer", 8, 1, 1, 1},
        {"award",             "uint64_t",    "integer", 8, 0, 0, 1},
        {"calendar_event_id", "uint64_t",    "integer", 8, 0, 0, 1},
        {"platform",          "uint64_t",    "integer", 8, 0, 0, 1},
        {"status",            "uint64_t",    "integer", 8, 0, 0, 1},
        {"host",              "uint64_t",    "integer", 8, 0, 0, 1},
        {"hash",              "std::string", "text",    0, 0, 0, 1},
        {"rep_rate",          "double",      "real",    8, 0, 0, 1}
};

const std::string &EventLogs::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}

EventLogs::EventLogs(const Row &r, const ssize_t indexOffset) noexcept
{
    if (indexOffset < 0)
    {
        if (!r["id"].isNull())
        {
            id_ = std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if (!r["award"].isNull())
        {
            award_ = std::make_shared<uint64_t>(r["award"].as<uint64_t>());
        }
        if (!r["calendar_event_id"].isNull())
        {
            calendarEventId_ = std::make_shared<uint64_t>(r["calendar_event_id"].as<uint64_t>());
        }
        if (!r["platform"].isNull())
        {
            platform_ = std::make_shared<uint64_t>(r["platform"].as<uint64_t>());
        }
        if (!r["status"].isNull())
        {
            status_ = std::make_shared<uint64_t>(r["status"].as<uint64_t>());
        }
        if (!r["host"].isNull())
        {
            host_ = std::make_shared<uint64_t>(r["host"].as<uint64_t>());
        }
        if (!r["hash"].isNull())
        {
            hash_ = std::make_shared<std::string>(r["hash"].as<std::string>());
        }
        if (!r["rep_rate"].isNull())
        {
            repRate_ = std::make_shared<double>(r["rep_rate"].as<double>());
        }
    }
    else
    {
        size_t offset = (size_t) indexOffset;
        if (offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull())
        {
            id_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if (!r[index].isNull())
        {
            award_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if (!r[index].isNull())
        {
            calendarEventId_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if (!r[index].isNull())
        {
            platform_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if (!r[index].isNull())
        {
            status_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if (!r[index].isNull())
        {
            host_ = std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if (!r[index].isNull())
        {
            hash_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if (!r[index].isNull())
        {
            repRate_ = std::make_shared<double>(r[index].as<double>());
        }
    }

}

EventLogs::EventLogs(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            award_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            calendarEventId_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            platform_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            status_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull())
        {
            host_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull())
        {
            hash_ = std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull())
        {
            repRate_ = std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
}

EventLogs::EventLogs(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson["id"].asUInt64());
        }
    }
    if (pJson.isMember("award"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["award"].isNull())
        {
            award_ = std::make_shared<uint64_t>((uint64_t) pJson["award"].asUInt64());
        }
    }
    if (pJson.isMember("calendar_event_id"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["calendar_event_id"].isNull())
        {
            calendarEventId_ = std::make_shared<uint64_t>((uint64_t) pJson["calendar_event_id"].asUInt64());
        }
    }
    if (pJson.isMember("platform"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["platform"].isNull())
        {
            platform_ = std::make_shared<uint64_t>((uint64_t) pJson["platform"].asUInt64());
        }
    }
    if (pJson.isMember("status"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["status"].isNull())
        {
            status_ = std::make_shared<uint64_t>((uint64_t) pJson["status"].asUInt64());
        }
    }
    if (pJson.isMember("host"))
    {
        dirtyFlag_[5] = true;
        if (!pJson["host"].isNull())
        {
            host_ = std::make_shared<uint64_t>((uint64_t) pJson["host"].asUInt64());
        }
    }
    if (pJson.isMember("hash"))
    {
        dirtyFlag_[6] = true;
        if (!pJson["hash"].isNull())
        {
            hash_ = std::make_shared<std::string>(pJson["hash"].asString());
        }
    }
    if (pJson.isMember("rep_rate"))
    {
        dirtyFlag_[7] = true;
        if (!pJson["rep_rate"].isNull())
        {
            repRate_ = std::make_shared<double>(pJson["rep_rate"].asDouble());
        }
    }
}

void EventLogs::updateByMasqueradedJson(const Json::Value &pJson,
                                        const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            award_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            calendarEventId_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            platform_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            status_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull())
        {
            host_ = std::make_shared<uint64_t>((uint64_t) pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull())
        {
            hash_ = std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull())
        {
            repRate_ = std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
}

void EventLogs::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("id"))
    {
        if (!pJson["id"].isNull())
        {
            id_ = std::make_shared<uint64_t>((uint64_t) pJson["id"].asUInt64());
        }
    }
    if (pJson.isMember("award"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["award"].isNull())
        {
            award_ = std::make_shared<uint64_t>((uint64_t) pJson["award"].asUInt64());
        }
    }
    if (pJson.isMember("calendar_event_id"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["calendar_event_id"].isNull())
        {
            calendarEventId_ = std::make_shared<uint64_t>((uint64_t) pJson["calendar_event_id"].asUInt64());
        }
    }
    if (pJson.isMember("platform"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["platform"].isNull())
        {
            platform_ = std::make_shared<uint64_t>((uint64_t) pJson["platform"].asUInt64());
        }
    }
    if (pJson.isMember("status"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["status"].isNull())
        {
            status_ = std::make_shared<uint64_t>((uint64_t) pJson["status"].asUInt64());
        }
    }
    if (pJson.isMember("host"))
    {
        dirtyFlag_[5] = true;
        if (!pJson["host"].isNull())
        {
            host_ = std::make_shared<uint64_t>((uint64_t) pJson["host"].asUInt64());
        }
    }
    if (pJson.isMember("hash"))
    {
        dirtyFlag_[6] = true;
        if (!pJson["hash"].isNull())
        {
            hash_ = std::make_shared<std::string>(pJson["hash"].asString());
        }
    }
    if (pJson.isMember("rep_rate"))
    {
        dirtyFlag_[7] = true;
        if (!pJson["rep_rate"].isNull())
        {
            repRate_ = std::make_shared<double>(pJson["rep_rate"].asDouble());
        }
    }
}

const uint64_t &EventLogs::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (id_)
        return *id_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventLogs::getId() const noexcept
{
    return id_;
}

void EventLogs::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}


const typename EventLogs::PrimaryKeyType &EventLogs::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &EventLogs::getValueOfAward() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (award_)
        return *award_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventLogs::getAward() const noexcept
{
    return award_;
}

void EventLogs::setAward(const uint64_t &pAward) noexcept
{
    award_ = std::make_shared<uint64_t>(pAward);
    dirtyFlag_[1] = true;
}


const uint64_t &EventLogs::getValueOfCalendarEventId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (calendarEventId_)
        return *calendarEventId_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventLogs::getCalendarEventId() const noexcept
{
    return calendarEventId_;
}

void EventLogs::setCalendarEventId(const uint64_t &pCalendarEventId) noexcept
{
    calendarEventId_ = std::make_shared<uint64_t>(pCalendarEventId);
    dirtyFlag_[2] = true;
}


const uint64_t &EventLogs::getValueOfPlatform() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (platform_)
        return *platform_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventLogs::getPlatform() const noexcept
{
    return platform_;
}

void EventLogs::setPlatform(const uint64_t &pPlatform) noexcept
{
    platform_ = std::make_shared<uint64_t>(pPlatform);
    dirtyFlag_[3] = true;
}


const uint64_t &EventLogs::getValueOfStatus() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (status_)
        return *status_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventLogs::getStatus() const noexcept
{
    return status_;
}

void EventLogs::setStatus(const uint64_t &pStatus) noexcept
{
    status_ = std::make_shared<uint64_t>(pStatus);
    dirtyFlag_[4] = true;
}


const uint64_t &EventLogs::getValueOfHost() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if (host_)
        return *host_;
    return defaultValue;
}

const std::shared_ptr<uint64_t> &EventLogs::getHost() const noexcept
{
    return host_;
}

void EventLogs::setHost(const uint64_t &pHost) noexcept
{
    host_ = std::make_shared<uint64_t>(pHost);
    dirtyFlag_[5] = true;
}


const std::string &EventLogs::getValueOfHash() const noexcept
{
    const static std::string defaultValue = std::string();
    if (hash_)
        return *hash_;
    return defaultValue;
}

const std::shared_ptr<std::string> &EventLogs::getHash() const noexcept
{
    return hash_;
}

void EventLogs::setHash(const std::string &pHash) noexcept
{
    hash_ = std::make_shared<std::string>(pHash);
    dirtyFlag_[6] = true;
}

void EventLogs::setHash(std::string &&pHash) noexcept
{
    hash_ = std::make_shared<std::string>(std::move(pHash));
    dirtyFlag_[6] = true;
}


const double &EventLogs::getValueOfRepRate() const noexcept
{
    const static double defaultValue = double();
    if (repRate_)
        return *repRate_;
    return defaultValue;
}

const std::shared_ptr<double> &EventLogs::getRepRate() const noexcept
{
    return repRate_;
}

void EventLogs::setRepRate(const double &pRepRate) noexcept
{
    repRate_ = std::make_shared<double>(pRepRate);
    dirtyFlag_[7] = true;
}


void EventLogs::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &EventLogs::insertColumns() noexcept
{
    static const std::vector<std::string> inCols = {
            "award",
            "calendar_event_id",
            "platform",
            "status",
            "host",
            "hash",
            "rep_rate"
    };
    return inCols;
}

void EventLogs::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getAward())
        {
            binder << getValueOfAward();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getCalendarEventId())
        {
            binder << getValueOfCalendarEventId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getPlatform())
        {
            binder << getValueOfPlatform();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5])
    {
        if (getHost())
        {
            binder << getValueOfHost();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6])
    {
        if (getHash())
        {
            binder << getValueOfHash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7])
    {
        if (getRepRate())
        {
            binder << getValueOfRepRate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> EventLogs::updateColumns() const
{
    std::vector<std::string> ret;
    if (dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if (dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if (dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if (dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if (dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void EventLogs::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getAward())
        {
            binder << getValueOfAward();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getCalendarEventId())
        {
            binder << getValueOfCalendarEventId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getPlatform())
        {
            binder << getValueOfPlatform();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5])
    {
        if (getHost())
        {
            binder << getValueOfHost();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6])
    {
        if (getHash())
        {
            binder << getValueOfHash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7])
    {
        if (getRepRate())
        {
            binder << getValueOfRepRate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

Json::Value EventLogs::toJson() const
{
    Json::Value ret;
    if (getId())
    {
        ret["id"] = (Json::UInt64) getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getAward())
    {
        ret["award"] = (Json::UInt64) getValueOfAward();
    }
    else
    {
        ret["award"] = Json::Value();
    }
    if (getCalendarEventId())
    {
        ret["calendar_event_id"] = (Json::UInt64) getValueOfCalendarEventId();
    }
    else
    {
        ret["calendar_event_id"] = Json::Value();
    }
    if (getPlatform())
    {
        ret["platform"] = (Json::UInt64) getValueOfPlatform();
    }
    else
    {
        ret["platform"] = Json::Value();
    }
    if (getStatus())
    {
        ret["status"] = (Json::UInt64) getValueOfStatus();
    }
    else
    {
        ret["status"] = Json::Value();
    }
    if (getHost())
    {
        ret["host"] = (Json::UInt64) getValueOfHost();
    }
    else
    {
        ret["host"] = Json::Value();
    }
    if (getHash())
    {
        ret["hash"] = getValueOfHash();
    }
    else
    {
        ret["hash"] = Json::Value();
    }
    if (getRepRate())
    {
        ret["rep_rate"] = getValueOfRepRate();
    }
    else
    {
        ret["rep_rate"] = Json::Value();
    }
    return ret;
}

Json::Value EventLogs::toMasqueradedJson(
        const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if (pMasqueradingVector.size() == 8)
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (getId())
            {
                ret[pMasqueradingVector[0]] = (Json::UInt64) getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (getAward())
            {
                ret[pMasqueradingVector[1]] = (Json::UInt64) getValueOfAward();
            }
            else
            {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (getCalendarEventId())
            {
                ret[pMasqueradingVector[2]] = (Json::UInt64) getValueOfCalendarEventId();
            }
            else
            {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty())
        {
            if (getPlatform())
            {
                ret[pMasqueradingVector[3]] = (Json::UInt64) getValueOfPlatform();
            }
            else
            {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[4].empty())
        {
            if (getStatus())
            {
                ret[pMasqueradingVector[4]] = (Json::UInt64) getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[4]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[5].empty())
        {
            if (getHost())
            {
                ret[pMasqueradingVector[5]] = (Json::UInt64) getValueOfHost();
            }
            else
            {
                ret[pMasqueradingVector[5]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[6].empty())
        {
            if (getHash())
            {
                ret[pMasqueradingVector[6]] = getValueOfHash();
            }
            else
            {
                ret[pMasqueradingVector[6]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[7].empty())
        {
            if (getRepRate())
            {
                ret[pMasqueradingVector[7]] = getValueOfRepRate();
            }
            else
            {
                ret[pMasqueradingVector[7]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId())
    {
        ret["id"] = (Json::UInt64) getValueOfId();
    }
    else
    {
        ret["id"] = Json::Value();
    }
    if (getAward())
    {
        ret["award"] = (Json::UInt64) getValueOfAward();
    }
    else
    {
        ret["award"] = Json::Value();
    }
    if (getCalendarEventId())
    {
        ret["calendar_event_id"] = (Json::UInt64) getValueOfCalendarEventId();
    }
    else
    {
        ret["calendar_event_id"] = Json::Value();
    }
    if (getPlatform())
    {
        ret["platform"] = (Json::UInt64) getValueOfPlatform();
    }
    else
    {
        ret["platform"] = Json::Value();
    }
    if (getStatus())
    {
        ret["status"] = (Json::UInt64) getValueOfStatus();
    }
    else
    {
        ret["status"] = Json::Value();
    }
    if (getHost())
    {
        ret["host"] = (Json::UInt64) getValueOfHost();
    }
    else
    {
        ret["host"] = Json::Value();
    }
    if (getHash())
    {
        ret["hash"] = getValueOfHash();
    }
    else
    {
        ret["hash"] = Json::Value();
    }
    if (getRepRate())
    {
        ret["rep_rate"] = getValueOfRepRate();
    }
    else
    {
        ret["rep_rate"] = Json::Value();
    }
    return ret;
}

bool EventLogs::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if (pJson.isMember("award"))
    {
        if (!validJsonOfField(1, "award", pJson["award"], err, true))
            return false;
    }
    else
    {
        err = "The award column cannot be null";
        return false;
    }
    if (pJson.isMember("calendar_event_id"))
    {
        if (!validJsonOfField(2, "calendar_event_id", pJson["calendar_event_id"], err, true))
            return false;
    }
    else
    {
        err = "The calendar_event_id column cannot be null";
        return false;
    }
    if (pJson.isMember("platform"))
    {
        if (!validJsonOfField(3, "platform", pJson["platform"], err, true))
            return false;
    }
    else
    {
        err = "The platform column cannot be null";
        return false;
    }
    if (pJson.isMember("status"))
    {
        if (!validJsonOfField(4, "status", pJson["status"], err, true))
            return false;
    }
    else
    {
        err = "The status column cannot be null";
        return false;
    }
    if (pJson.isMember("host"))
    {
        if (!validJsonOfField(5, "host", pJson["host"], err, true))
            return false;
    }
    else
    {
        err = "The host column cannot be null";
        return false;
    }
    if (pJson.isMember("hash"))
    {
        if (!validJsonOfField(6, "hash", pJson["hash"], err, true))
            return false;
    }
    else
    {
        err = "The hash column cannot be null";
        return false;
    }
    if (pJson.isMember("rep_rate"))
    {
        if (!validJsonOfField(7, "rep_rate", pJson["rep_rate"], err, true))
            return false;
    }
    else
    {
        err = "The rep_rate column cannot be null";
        return false;
    }
    return true;
}

bool EventLogs::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if (pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty())
    {
        if (pJson.isMember(pMasqueradingVector[0]))
        {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if (!pMasqueradingVector[1].empty())
    {
        if (pJson.isMember(pMasqueradingVector[1]))
        {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[2].empty())
    {
        if (pJson.isMember(pMasqueradingVector[2]))
        {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[3].empty())
    {
        if (pJson.isMember(pMasqueradingVector[3]))
        {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[4].empty())
    {
        if (pJson.isMember(pMasqueradingVector[4]))
        {
            if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[5].empty())
    {
        if (pJson.isMember(pMasqueradingVector[5]))
        {
            if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[6].empty())
    {
        if (pJson.isMember(pMasqueradingVector[6]))
        {
            if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    if (!pMasqueradingVector[7].empty())
    {
        if (pJson.isMember(pMasqueradingVector[7]))
        {
            if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err = "The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    return true;
}

bool EventLogs::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("id"))
    {
        if (!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("award"))
    {
        if (!validJsonOfField(1, "award", pJson["award"], err, false))
            return false;
    }
    if (pJson.isMember("calendar_event_id"))
    {
        if (!validJsonOfField(2, "calendar_event_id", pJson["calendar_event_id"], err, false))
            return false;
    }
    if (pJson.isMember("platform"))
    {
        if (!validJsonOfField(3, "platform", pJson["platform"], err, false))
            return false;
    }
    if (pJson.isMember("status"))
    {
        if (!validJsonOfField(4, "status", pJson["status"], err, false))
            return false;
    }
    if (pJson.isMember("host"))
    {
        if (!validJsonOfField(5, "host", pJson["host"], err, false))
            return false;
    }
    if (pJson.isMember("hash"))
    {
        if (!validJsonOfField(6, "hash", pJson["hash"], err, false))
            return false;
    }
    if (pJson.isMember("rep_rate"))
    {
        if (!validJsonOfField(7, "rep_rate", pJson["rep_rate"], err, false))
            return false;
    }
    return true;
}

bool EventLogs::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if (pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    return true;
}

bool EventLogs::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch (index)
    {
        case 0:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (isForCreation)
            {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 2:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 3:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 4:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 5:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isUInt64())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 6:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 7:
            if (pJson.isNull())
            {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isNumeric())
            {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;

        default:
            err = "Internal error in the server";
            return false;
            break;
    }
    return true;
}

void EventLogs::getAction(const DbClientPtr &clientPtr,
                          const std::function<void(std::vector<EventActions>)> &rcb,
                          const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from event_actions where log_id = ?";
    *clientPtr << sql
               << *id_
               >> [          rcb = std::move(rcb)](const Result &r)
               {
                   std::vector<EventActions> ret;
                   ret.reserve(ret.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(EventActions(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}

void EventLogs::getAttendance(const DbClientPtr &clientPtr,
                              const std::function<void(std::vector<EventAttendance>)> &rcb,
                              const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from event_attendance where log_id = ?";
    *clientPtr << sql
               << *id_
               >> [          rcb = std::move(rcb)](const Result &r)
               {
                   std::vector<EventAttendance> ret;
                   ret.reserve(ret.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(EventAttendance(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}

void EventLogs::getAward(const DbClientPtr &clientPtr,
                         const std::function<void(std::vector<EventAwards>)> &rcb,
                         const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from event_awards where log_id = ?";
    *clientPtr << sql
               << *id_
               >> [          rcb = std::move(rcb)](const Result &r)
               {
                   std::vector<EventAwards> ret;
                   ret.reserve(ret.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(EventAwards(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}

void EventLogs::getDiscord(const DbClientPtr &clientPtr,
                           const std::function<void(EventDiscordMap)> &rcb,
                           const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from event_discord_map where log_id = ?";
    *clientPtr << sql
               << *id_
               >> [          rcb = std::move(rcb), ecb](const Result &r)
               {
                   if (r.size() == 0)
                   {
                       ecb(UnexpectedRows("0 rows found"));
                   }
                   else if (r.size() > 1)
                   {
                       ecb(UnexpectedRows("Found more than one row"));
                   }
                   else
                   {
                       rcb(EventDiscordMap(r[0]));
                   }
               }
               >> ecb;
}
